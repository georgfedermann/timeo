// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.poormanscastle.products.timeo.task.web;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.poormanscastle.products.timeo.task.domain.Project;
import org.poormanscastle.products.timeo.task.domain.ProjectTeamMember;
import org.poormanscastle.products.timeo.task.domain.TimeoRole;
import org.poormanscastle.products.timeo.task.web.ProjectTeamMemberController;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ProjectTeamMemberController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ProjectTeamMemberController.create(@Valid ProjectTeamMember projectTeamMember, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, projectTeamMember);
            return "projectteammembers/create";
        }
        uiModel.asMap().clear();
        projectTeamMember.persist();
        return "redirect:/projectteammembers/" + encodeUrlPathSegment(projectTeamMember.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ProjectTeamMemberController.createForm(Model uiModel) {
        populateEditForm(uiModel, new ProjectTeamMember());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (TimeoRole.countTimeoRoles() == 0) {
            dependencies.add(new String[] { "role", "timeoroles" });
        }
        if (Project.countProjects() == 0) {
            dependencies.add(new String[] { "project", "projects" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "projectteammembers/create";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ProjectTeamMemberController.update(@Valid ProjectTeamMember projectTeamMember, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, projectTeamMember);
            return "projectteammembers/update";
        }
        uiModel.asMap().clear();
        projectTeamMember.merge();
        return "redirect:/projectteammembers/" + encodeUrlPathSegment(projectTeamMember.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ProjectTeamMemberController.updateForm(@PathVariable("id") String id, Model uiModel) {
        populateEditForm(uiModel, ProjectTeamMember.findProjectTeamMember(id));
        return "projectteammembers/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ProjectTeamMemberController.delete(@PathVariable("id") String id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        ProjectTeamMember projectTeamMember = ProjectTeamMember.findProjectTeamMember(id);
        projectTeamMember.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/projectteammembers";
    }
    
    String ProjectTeamMemberController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
