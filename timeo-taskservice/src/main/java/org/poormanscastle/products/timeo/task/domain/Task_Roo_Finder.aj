// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.poormanscastle.products.timeo.task.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.poormanscastle.products.timeo.task.domain.ProjectTeamMember;
import org.poormanscastle.products.timeo.task.domain.Task;

privileged aspect Task_Roo_Finder {
    
    public static Long Task.countFindTasksByProjectTeamMember(ProjectTeamMember projectTeamMember) {
        if (projectTeamMember == null) throw new IllegalArgumentException("The projectTeamMember argument is required");
        EntityManager em = Task.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Task AS o WHERE o.projectTeamMember = :projectTeamMember", Long.class);
        q.setParameter("projectTeamMember", projectTeamMember);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Task> Task.findTasksByProjectTeamMember(ProjectTeamMember projectTeamMember) {
        if (projectTeamMember == null) throw new IllegalArgumentException("The projectTeamMember argument is required");
        EntityManager em = Task.entityManager();
        TypedQuery<Task> q = em.createQuery("SELECT o FROM Task AS o WHERE o.projectTeamMember = :projectTeamMember", Task.class);
        q.setParameter("projectTeamMember", projectTeamMember);
        return q;
    }
    
    public static TypedQuery<Task> Task.findTasksByProjectTeamMember(ProjectTeamMember projectTeamMember, String sortFieldName, String sortOrder) {
        if (projectTeamMember == null) throw new IllegalArgumentException("The projectTeamMember argument is required");
        EntityManager em = Task.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Task AS o WHERE o.projectTeamMember = :projectTeamMember");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Task> q = em.createQuery(queryBuilder.toString(), Task.class);
        q.setParameter("projectTeamMember", projectTeamMember);
        return q;
    }
    
}
